;!MURBIN

;; This is for murbin, not plain assembly
;; --assemble flag of main.py and binary-emulator/ are needed

_start: ;; if compiled with stdlib just comment that out
    mov e3 4
    cpy e1 e3
    call main
    hlt *r0

include std.io
include std.math
include std.string

$msg1:
    #"Enter number 1> "
$msg2:
    #"Enter number 2> "
$msg3:
    #"\n1: Add\n2: Sub\n3: Mul\n4: Div\n\nEnter Operation Code> "

num_1:
    0
num_2:
    0
op:
    0

main:
    ; Num 1
    mov r0 $msg1
    call puts

    cpy num_1 e3
    mov r0 e3
    call getline
    inc r0
    mov e3 r0

    mov r0 num_1
    call atoi
    mov num_1 r0

    ; Num 2
    mov r0 $msg2
    call puts

    cpy num_2 e3
    mov r0 e3
    call getline
    inc r0
    mov e3 r0

    mov r0 num_2
    call atoi
    mov num_2 r0

    ; Op
    mov r0 $msg3
    call puts

    cpy op e3
    mov r0 e3
    call getline
    inc r0
    mov e3 r0

    mov r0 op
    call atoi
    mov op r0
    dec op ; make it start at 0

    mov r0 num_1
    case op add,sub,mul,div default

    add:
        add r0 num_2
        jmp end
    sub:
        sub r0 num_2
        jnz s5 print_neg
        jmp end
    mul:
        mov r1 num_2
        call math.mul
        jmp end
    div:
        jz r0 divbyzero
        mov r1 num_2
        call math.div
        jnz r1 rest
        jmp end


    default:
        mov r0 #1
        ret
    $divbyzero_text:
        "Error: Division by Zero"
    divbyzero:
        putmacro println $divbyzero_text
        mov r0 #3
        ret

    $rest_text:
        #" rest "
    rest:
        mov r2 r1 ; can't use r1 for the remainder because printnum would overwrite it
        call printnum
        mov r0 $rest_text
        call puts
        mov r0 r2
        call printnum
        putmacro putchar std.endl
        movz r0
        ret

    neg:
        #"-"
    print_neg:
        putmacro putchar neg
    end:
        call printnum
        putmacro putchar std.endl
        movz r0
        ret
