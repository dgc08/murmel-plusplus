;; Lets try this

;; Title: Bonsai/Murmel emulation using murmel with pointers
;; AUTHOR: Sinthoras39

;; This assumes you have at least one level of pointers available on your Bonsai/Murmel Emulation that are dereferenced with *
;; This only dereferences one pointer at max. This makes this really slow, but enables this to run itself
;; Check out commit ca7e7287c569fffafdc008e3d52de98a81a98cf5 for an old version which runs faster (it doesn't implement pointers though so it can't run itself)

;; e0 is ip
;; e1 & e2 is temp storage
;; user program/memory starts at (e)3, program and the registers/the stack lie in the same memory.
;; Make sure to account for the space for e0, e1 and e2 while setting offsets in mem

;; Instruction format: first register is opcode, next register is argument. `hlt` takes 0 as argument

;; Opcodes:
;; 0: inc
;; 1: dec
;; 2: jmp
;; 3: tst
;; 4: hlt

;; Use murpp with the --assemble flag and it will produce valid memory files for this

exec:
    mov e2 *e0
    mov *e0,e1 e2
    inc e0
    case e1 inc,dec,jmp,tst,hlt,incp,decp,jmpp,tstp,hltp default

    inc:
        mov e2 *e0
        mov *e0,e1 e2
        inc *e1
        jmp end
    dec:
        mov e2 *e0
        mov *e0,e1 e2
        dec *e1
        jmp end
    jmp:
        mov e2 *e0
        mov e1,*e0 e2
        mov e0 e1
        jmp exec
    tst:
        mov e2 *e0
        mov *e0,e1 e2
        jz *e1 skip
        jmp end
        skip:
            inc e0
            inc e0
            inc e0
            jmp exec
    hlt:
        mov e1 *e0
        mov *e0,e2,e6 e1
        mov e0 #7
        hlt
    incp:
        mov e2 *e0
        mov *e0,e1 e2
        mov e2 *e1
        inc *e2
        mov *e1 e2
        jmp end
    decp:
        mov e2 *e0
        mov *e0,e1 e2
        mov e2 *e1
        dec *e2
        mov *e1 e2
        jmp end
    jmpp:
        mov e2 *e0
        mov e1,*e0 e2
        mov e0,e2 *e1
        mov *e1 e2
        jmp exec
    tstp:
        mov e2 *e0
        mov *e0,e1 e2
        mov e2 *e1
        jz *e2 skip
        mov *e1 e2
        jmp end
        skip:
            inc e0
            inc e0
            inc e0
            mov *e1 e2
            jmp exec
    hltp:
        mov e2 *e0
        mov *e0,e1 e2
        mov e2,e6 *e1
        mov e0 #7
        hlt

    end:
        inc e0
        jmp exec

default:
    mov e2,e6 #2
    hlt
